// Code generated by MockGen. DO NOT EDIT.
// Source: identity-forecaster/internal/app/forecaster/domain (interfaces: ForecasterRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "identity-forecaster/internal/app/forecaster/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockForecasterRepository is a mock of ForecasterRepository interface.
type MockForecasterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockForecasterRepositoryMockRecorder
}

// MockForecasterRepositoryMockRecorder is the mock recorder for MockForecasterRepository.
type MockForecasterRepositoryMockRecorder struct {
	mock *MockForecasterRepository
}

// NewMockForecasterRepository creates a new mock instance.
func NewMockForecasterRepository(ctrl *gomock.Controller) *MockForecasterRepository {
	mock := &MockForecasterRepository{ctrl: ctrl}
	mock.recorder = &MockForecasterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForecasterRepository) EXPECT() *MockForecasterRepositoryMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockForecasterRepository) CreatePerson(arg0 context.Context, arg1 domain.Person, arg2 domain.DataFromAPI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockForecasterRepositoryMockRecorder) CreatePerson(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockForecasterRepository)(nil).CreatePerson), arg0, arg1, arg2)
}

// DeletePersonByID mocks base method.
func (m *MockForecasterRepository) DeletePersonByID(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePersonByID indicates an expected call of DeletePersonByID.
func (mr *MockForecasterRepositoryMockRecorder) DeletePersonByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonByID", reflect.TypeOf((*MockForecasterRepository)(nil).DeletePersonByID), arg0, arg1)
}

// ReadPersons mocks base method.
func (m *MockForecasterRepository) ReadPersons(arg0 context.Context, arg1, arg2 int, arg3 domain.Filters) ([]domain.PersonFromDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPersons", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]domain.PersonFromDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPersons indicates an expected call of ReadPersons.
func (mr *MockForecasterRepositoryMockRecorder) ReadPersons(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPersons", reflect.TypeOf((*MockForecasterRepository)(nil).ReadPersons), arg0, arg1, arg2, arg3)
}

// UpdatePerson mocks base method.
func (m *MockForecasterRepository) UpdatePerson(arg0 context.Context, arg1 int, arg2 domain.PersonWithAPIData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockForecasterRepositoryMockRecorder) UpdatePerson(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockForecasterRepository)(nil).UpdatePerson), arg0, arg1, arg2)
}
